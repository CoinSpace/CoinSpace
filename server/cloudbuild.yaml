steps:

- name: 'node:20.11.1'
  id: 'build web'
  env:
    - 'VITE_DISTRIBUTION=${_VITE_DISTRIBUTION}'
    - 'VITE_COMMIT=${COMMIT_SHA}'
    - 'VITE_SITE_URL=${_VITE_SITE_URL}'
    - 'VITE_SENTRY_DSN=${_VITE_SENTRY_DSN}'
    - 'VITE_SENTRY_ENVIRONMENT=${_VITE_SENTRY_ENVIRONMENT}'
    - 'VITE_CHANGELLY_REF=${_VITE_CHANGELLY_REF}'
    - 'VITE_MOONPAY_API_KEY=${_VITE_MOONPAY_API_KEY}'
    - 'VITE_WALLETCONNECT_ID=${_VITE_WALLETCONNECT_ID}'
    - 'BASE_URL=${_BASE_URL}'
    - 'SENTRY_ORG=${_SENTRY_ORG}'
    - 'SENTRY_PROJECT=${_SENTRY_PROJECT}'
    - 'SENTRY_AUTH_TOKEN=${_SENTRY_AUTH_TOKEN}'
    - 'NODE_OPTIONS="--max-old-space-size=3575"'
  dir: web
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      npm config set @coinspace:registry https://npm.pkg.github.com \
      && npm config set "//npm.pkg.github.com/:_authToken" ${_NPM_READ_TOKEN} \
      && npm ci \
      && npm run i18n:ci \
      && npm run lint \
      && npm run lint:style \
      && if [[ "${_VITE_API_BTC_URL}" ]]; then export VITE_API_BTC_URL=${_VITE_API_BTC_URL}; fi \
      && if [[ "${_VITE_API_BCH_URL}" ]]; then export VITE_API_BCH_URL=${_VITE_API_BCH_URL}; fi \
      && if [[ "${_VITE_API_DASH_URL}" ]]; then export VITE_API_DASH_URL=${_VITE_API_DASH_URL}; fi \
      && if [[ "${_VITE_API_DOGE_URL}" ]]; then export VITE_API_DOGE_URL=${_VITE_API_DOGE_URL}; fi \
      && if [[ "${_VITE_API_LTC_URL}" ]]; then export VITE_API_LTC_URL=${_VITE_API_LTC_URL}; fi \
      && if [[ "${_VITE_API_ETH_URL}" ]]; then export VITE_API_ETH_URL=${_VITE_API_ETH_URL}; fi \
      && if [[ "${_VITE_API_ETC_URL}" ]]; then export VITE_API_ETC_URL=${_VITE_API_ETC_URL}; fi \
      && if [[ "${_VITE_API_BSC_URL}" ]]; then export VITE_API_BSC_URL=${_VITE_API_BSC_URL}; fi \
      && if [[ "${_VITE_API_POLYGON_URL}" ]]; then export VITE_API_POLYGON_URL=${_VITE_API_POLYGON_URL}; fi \
      && if [[ "${_VITE_API_AVAX_URL}" ]]; then export VITE_API_AVAX_URL=${_VITE_API_AVAX_URL}; fi \
      && if [[ "${_VITE_API_ARB_URL}" ]]; then export VITE_API_ARB_URL=${_VITE_API_ARB_URL}; fi \
      && if [[ "${_VITE_API_XRP_URL}" ]]; then export VITE_API_XRP_URL=${_VITE_API_XRP_URL}; fi \
      && if [[ "${_VITE_API_XLM_URL}" ]]; then export VITE_API_XLM_URL=${_VITE_API_XLM_URL}; fi \
      && if [[ "${_VITE_API_XMR_URL}" ]]; then export VITE_API_XMR_URL=${_VITE_API_XMR_URL}; fi \
      && if [[ "${_VITE_API_EOS_URL}" ]]; then export VITE_API_EOS_URL=${_VITE_API_EOS_URL}; fi \
      && if [[ "${_VITE_API_SOL_URL}" ]]; then export VITE_API_SOL_URL=${_VITE_API_SOL_URL}; fi \
      && if [[ "${_VITE_API_TRX_URL}" ]]; then export VITE_API_TRX_URL=${_VITE_API_TRX_URL}; fi \
      && if [[ "${_VITE_API_ADA_URL}" ]]; then export VITE_API_ADA_URL=${_VITE_API_ADA_URL}; fi \
      && if [[ "${_VITE_API_TON_URL}" ]]; then export VITE_API_TON_URL=${_VITE_API_TON_URL}; fi \
      && if [[ "${_VITE_API_OP_URL}" ]]; then export VITE_API_OP_URL=${_VITE_API_OP_URL}; fi \
      && if [[ "${_VITE_API_FTM_URL}" ]]; then export VITE_API_FTM_URL=${_VITE_API_FTM_URL}; fi \
      && npm run build

- name: 'gcr.io/cloud-builders/docker'
  id: 'build server'
  dir: server
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      docker build --build-arg NODE_AUTH_TOKEN=${_NPM_READ_TOKEN} --tag "gcr.io/$PROJECT_ID/${_APP}:latest" . \
      && docker push "gcr.io/$PROJECT_ID/${_APP}:latest"

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'deploy'
  args: ['delete', 'po', '-l', 'app=${_APP}']
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'

- name: 'gcr.io/cloud-builders/gcloud'
  id: 'purge cdn'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if [[ "${_DISTRIBUTION}" == "web" ]]; then
      gcloud compute url-maps invalidate-cdn-cache ${_CDN_URL_MAP_NAME} --host ${_CDN_HOST} --path "/*" --async
    fi

timeout: 900s
