name: CoinSpace CI

on: push

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Set app version
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          draft: true
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          body: |
            * [Web Wallet](https://coin.space/wallet/)

            * [Tor Wallet](http://coinspacezp5mmyuicbz2hoafbnduj4vzkttq3grn5mnwdue5t343zid.onion/)

            * [iOS Application](https://apps.apple.com/us/app/coinspace-bitcoin-wallet/id980719434#?platform=iphone)

            * [Android Application](https://play.google.com/store/apps/details?id=com.coinspace.app)

            * [Galaxy Store](https://galaxy.store/coinapp)

            * [Windows Installer: Coin.Wallet.Setup.exe](https://github.com/CoinSpace/CoinSpace/releases/download/v${{ env.VERSION }}/Coin.Wallet.Setup.exe)

            * [macOS Installer: Coin.Wallet.dmg](https://github.com/CoinSpace/CoinSpace/releases/download/v${{ env.VERSION }}/Coin.Wallet.dmg)

            * [Microsoft Store](https://www.microsoft.com/store/apps/9NBLGGH5PXJQ)

            * [Mac App Store](https://apps.apple.com/us/app/coin-bitcoin-wallet/id980719434#?platform=mac)

            * [Linux Snap](https://snapcraft.io/coin)

  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: https://npm.pkg.github.com/
      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_READ_TOKEN}}
      - run: npm run lint

  build:
    needs: lint
    environment: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-10.15
            node: 14
            DISTRIBUTION: mac
            BUILD_TYPE: electron
            SENTRY_KEY: SENTRY_DSN_MAC
          - os: macos-10.15
            node: 14
            DISTRIBUTION: mas
            BUILD_TYPE: electron
            SENTRY_KEY: SENTRY_DSN_MAS
          - os: macos-10.15
            node: 14
            DISTRIBUTION: mas-dev
            BUILD_TYPE: electron
            SENTRY_KEY: SENTRY_DSN_MAS
          - os: ubuntu-20.04
            node: 14
            DISTRIBUTION: snap
            BUILD_TYPE: electron
            SENTRY_KEY: SENTRY_DSN_SNAP
          - os: windows-2019
            node: 14
            DISTRIBUTION: win
            BUILD_TYPE: electron
            SENTRY_KEY: SENTRY_DSN_WIN
          - os: windows-2019
            node: 14
            DISTRIBUTION: appx
            BUILD_TYPE: electron
            SENTRY_KEY: SENTRY_DSN_WIN
          - os: windows-2019
            node: 14
            DISTRIBUTION: appx-dev
            BUILD_TYPE: electron
            SENTRY_KEY: SENTRY_DSN_WIN
          - os: macos-11
            node: 14
            DISTRIBUTION: ios
            BUILD_TYPE: phonegap
            SENTRY_KEY: SENTRY_DSN_IOS
          - os: ubuntu-20.04
            node: 14
            DISTRIBUTION: android-play
            BUILD_TYPE: phonegap
            SENTRY_KEY: SENTRY_DSN_ANDROID
          - os: ubuntu-20.04
            node: 14
            DISTRIBUTION: android-galaxy
            BUILD_TYPE: phonegap
            SENTRY_KEY: SENTRY_DSN_ANDROID
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Install Node.js dependencies
        env:
          NODE_ENV: ci
          BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
          NPM_READ_TOKEN: ${{ secrets.NPM_READ_TOKEN }}
        shell: bash
        run: |
          npm config set @coinspace:registry https://npm.pkg.github.com
          npm config set "//npm.pkg.github.com/:_authToken" "${NPM_READ_TOKEN}"
          npm ci
          (cd ${BUILD_TYPE} && npm ci)
      - name: Install Snapcraft
        if: ${{ matrix.DISTRIBUTION == 'snap' }}
        uses: samuelmeuli/action-snapcraft@v1
        with:
          snapcraft_token: ${{ secrets.SNAP_TOKEN }}
      - name: Install JDK 1.8
        if: ${{ matrix.DISTRIBUTION == 'android-play' || matrix.DISTRIBUTION == 'android-galaxy' }}
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Install certificates & prepare for build
        env:
          DISTRIBUTION: ${{ matrix.DISTRIBUTION }}
          CERTIFICATE_MAC: ${{ secrets.CERTIFICATE_MAC }}
          CERTIFICATE_MAC_PASSWORD: ${{ secrets.CERTIFICATE_MAC_PASSWORD }}
          CERTIFICATE_DISTRIBUTION: ${{ secrets.CERTIFICATE_DISTRIBUTION }}
          CERTIFICATE_DISTRIBUTION_PASSWORD: ${{ secrets.CERTIFICATE_DISTRIBUTION_PASSWORD }}
          PROVISIONING_DISTRIBUTION: ${{ secrets.PROVISIONING_DISTRIBUTION }}
          PROVISIONING_DEVELOPMENT: ${{ secrets.PROVISIONING_DEVELOPMENT }}
          PROVISIONING_IOS: ${{ secrets.PROVISIONING_IOS }}
          PROVISIONING_IOS_WATCH_APP: ${{ secrets.PROVISIONING_IOS_WATCH_APP }}
          PROVISIONING_IOS_WATCH_APP_EXTENSION: ${{ secrets.PROVISIONING_IOS_WATCH_APP_EXTENSION }}
          GOOGLE_CLOUD_KEY: ${{ secrets.GOOGLE_CLOUD_KEY }}
          ANDROID_RELEASE_KEYSTORE: ${{ secrets.ANDROID_RELEASE_KEYSTORE }}
          CERTIFICATE_WIN: ${{ secrets.CERTIFICATE_WIN }}
        shell: bash
        run: |
          echo "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER";
          echo $GOOGLE_CLOUD_KEY | base64 --decode > gcloud.key.json;

          if [[ "$DISTRIBUTION" == "mac" || "$DISTRIBUTION" == "mas" || "$DISTRIBUTION" == "mas-dev" ]]; then
            echo $CERTIFICATE_MAC | base64 --decode > certificate.p12;
            security create-keychain -p coinspace build.keychain;
            security default-keychain -s build.keychain;
            security unlock-keychain -p coinspace build.keychain;
            security set-keychain-settings build.keychain;
            security list-keychains -d user -s build.keychain;
            security import certificate.p12 -k build.keychain -P $CERTIFICATE_MAC_PASSWORD -T /usr/bin/codesign -T /usr/bin/productbuild 2>&1 >/dev/null;
            security set-key-partition-list -S apple-tool:,apple: -s -k coinspace build.keychain 2>&1 >/dev/null;
            rm certificate.p12;
            if [[ "$DISTRIBUTION" == "mas" ]]; then
              echo $PROVISIONING_DISTRIBUTION | base64 --decode > electron/embedded.provisionprofile;
            fi
            if [[ "$DISTRIBUTION" == "mas-dev" ]]; then
              echo $PROVISIONING_DEVELOPMENT | base64 --decode > electron/embedded.provisionprofile;
            fi
          elif [[ "$DISTRIBUTION" == "ios" ]]; then
            echo $CERTIFICATE_DISTRIBUTION | base64 --decode > certificate.p12;
            security create-keychain -p coinspace build.keychain;
            security default-keychain -s build.keychain;
            security unlock-keychain -p coinspace build.keychain;
            security set-keychain-settings build.keychain;
            security list-keychains -d user -s build.keychain;
            security import certificate.p12 -k build.keychain -P $CERTIFICATE_DISTRIBUTION_PASSWORD -T /usr/bin/codesign -T /usr/bin/productbuild 2>&1 >/dev/null;
            security set-key-partition-list -S apple-tool:,apple: -s -k coinspace build.keychain 2>&1 >/dev/null;
            rm certificate.p12;
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
            echo $PROVISIONING_IOS | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/com.coinspace.wallet.mobileprovision;
            echo $PROVISIONING_IOS_WATCH_APP | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/com.coinspace.wallet.watchapp.mobileprovision;
            echo $PROVISIONING_IOS_WATCH_APP_EXTENSION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/com.coinspace.wallet.watchapp.extension.mobileprovision;
          elif [[ "$DISTRIBUTION" == "android-play" || "$DISTRIBUTION" == "android-galaxy" ]]; then
            echo $ANDROID_RELEASE_KEYSTORE | base64 --decode > phonegap/release.keystore;
            echo "/usr/local/lib/android/sdk/build-tools/30.0.3" >> $GITHUB_PATH
          elif [[ "$DISTRIBUTION" == "win" || "$DISTRIBUTION" == "appx" || "$DISTRIBUTION" == "appx-dev" ]]; then
            echo $CERTIFICATE_WIN | base64 --decode > electron/resources/certificate.pfx
            if [[ "$DISTRIBUTION" == "appx" ]]; then
              sed -i 's/function signAppx (program) {/function signAppx (program) { return;/' electron/node_modules/electron-windows-store/lib/sign.js
              sed -i 's/function makeCert (parametersOrPublisherName, certFilePath, program) {/function makeCert (parametersOrPublisherName, certFilePath, program) { return;/' electron/node_modules/electron-windows-store/lib/sign.js
            fi
          fi
      - name: Set app version
        env:
          BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
        shell: bash
        run: (cd ${BUILD_TYPE} && npm version $(node -p -e "require('../package.json').version"))
      - name: Build app
        env:
          NODE_ENV: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}
          SITE_URL: ${{ secrets.SITE_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISTRIBUTION: ${{ matrix.DISTRIBUTION }}
          BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
          SENTRY_DSN: ${{ secrets[matrix.SENTRY_KEY] }}
          SHAPESHIFT_API_KEY: ${{ secrets.SHAPESHIFT_API_KEY }}
          SHAPESHIFT_CLIENT_ID: ${{ secrets.SHAPESHIFT_CLIENT_ID }}
          MOONPAY_API_KEY: ${{ secrets.MOONPAY_API_KEY }}
          MOONPAY_WIDGET_BUY_URL: ${{ secrets.MOONPAY_WIDGET_BUY_URL }}
          MOONPAY_WIDGET_SELL_URL: ${{ secrets.MOONPAY_WIDGET_SELL_URL }}
          SENTRY_ENVIRONMENT: ${{ secrets.SENTRY_ENVIRONMENT }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcloud.key.json
          GOOGLE_CLOUD_BUCKET: ${{ secrets.GOOGLE_CLOUD_BUCKET }}
          ZENDESK_APP_ID: ${{ secrets.ZENDESK_APP_ID }}
          ZENDESK_CLIENT_ID: ${{ secrets.ZENDESK_CLIENT_ID }}
          ZENDESK_URL: ${{ secrets.ZENDESK_URL }}
          CERTIFICATE_WIN_PASSWORD: ${{ secrets.CERTIFICATE_WIN_PASSWORD }}
          APPX_IDENTITY: ${{ secrets.APPX_IDENTITY }}
          APPX_PACKAGE_NAME: ${{ secrets.APPX_PACKAGE_NAME }}
          APPX_PUBLISHER: ${{ secrets.APPX_PUBLISHER }}
          APPX_PUBLISHER_DEV: ${{ secrets.APPX_PUBLISHER_DEV }}
          APPX_PUBLISHER_NAME: ${{ secrets.APPX_PUBLISHER_NAME }}
          CHANGELLY_REF: ${{ secrets.CHANGELLY_REF }}
        shell: bash
        run: |
          node ./cli/i18n.js --json
          node ./cli/build.js ${BUILD_TYPE} --env=prod --release --platform=${DISTRIBUTION}
